@startuml

title __CZ2002's Class Diagram__\n

  namespace stars.boundary {
    class stars.boundary.AdminUI {
        - adminController : AdminController
        - dateFormatter : DateTimeFormatter
        - timeFormatter : DateTimeFormatter
        + AdminUI()
        + displayMenu()
        - getallcourses()
        - getallstudents()
    }
  }


  namespace stars.boundary {
    class stars.boundary.IndexTimingDisplayer {
        - index : Index
        - HEIGHT : int
        - WIDTH : int
        + IndexTimingDisplayer(index : Index)
        + displayTimetable()
        + pad(s : String) : String
    }
  }


  namespace stars.boundary {
    class stars.boundary.IntScanner {
        {static} + nextInt() : int
    }
  }


  namespace stars.boundary {
    class stars.boundary.LoginUI {
        {static} + main(args : String[])
        {static} - login()
    }
  }


  namespace stars.boundary {
    class stars.boundary.PrintIndexTimetableUI {
        + printIndexTimetable(userControllerInterface : UserControllerInterface)
    }
  }


  namespace stars.boundary {
    abstract class stars.boundary.SelectUI {
        + select(ls : ArrayList<Selectable>) : Selectable
    }
  }


  namespace stars.boundary {
    class stars.boundary.StudentUI {
        - studentController : StudentController
        + StudentUI(studentID : String)
        + displayMenu()
    }
  }


  namespace stars.boundary {
    class stars.boundary.TimetableDisplayer {
        - student : Student
        - HEIGHT : int
        - WIDTH : int
        + TimetableDisplayer(student : Student)
        + displayTimetable()
        + pad(s : String) : String
    }
  }




    namespace stars.controller {
    class stars.controller.AdminController {
        + AdminController()
        + addCourse()
        + addIndex()
        + addStudent()
        + addTiming()
        + changeIndexID()
        + createCourse()
        + createIndex()
        + createTiming()
        + dropIndex()
        + editAccess()
        + getCourseList()
        + getStudentList()
        + save()
        + setCourseID()
        + setVacancyLimit()
        }
    }


      namespace stars.controller {
        interface stars.controller.Authenticator {
            {abstract} + authenticate()
        }
      }


      namespace stars.controller {
        class stars.controller.DatabaseManager {
            - DATABASE_FILE : String
            + DatabaseManager()
            + addCourse()
            + addStudent()
            + findStudent()
            + getCoursesArray()
            + getStudentArray()
            + saveInformation()
            - loadInformation()
        }
      }


      namespace stars.controller {
        class stars.controller.FlatFileAdminAuthenticator {
            - ADMIN_ACCOUNT_FILE : String
            + authenticate()
        }
      }


      namespace stars.controller {
        class stars.controller.FlatFileStudentAuthenticator {
            - STUDENT_ACCOUNTS_FILE : String
            + addStudent()
            + authenticate()
            + editAccess()
        }
      }


      namespace stars.controller {
        class stars.controller.IndexStudentAdder {
            + addStudent()
        }
      }


      namespace stars.controller {
        class stars.controller.IndexStudentDropper {
            + dropStudent()
        }
      }


      namespace stars.controller {
        class stars.controller.IndexStudentSwopper {
            + swopStudent()
        }
      }


      namespace stars.controller {
        class stars.controller.LoginController {
            + verifyLogin()
        }
      }


      namespace stars.controller {
        class stars.controller.SetVacancyLimitController {
            + setVacancyLimit()
        }
      }


      namespace stars.controller {
        interface stars.controller.StudentAuthenticator {
            {abstract} + addStudent()
            {abstract} + editAccess()
        }
      }


      namespace stars.controller {
        class stars.controller.StudentController {
            + StudentController()
            + addIndex()
            + changeIndex()
            + displayTimetable()
            + dropIndex()
            + getConfirmedIndex()
            + getCourseList()
            + getRegisteredIndex()
            + getWaitlistedIndex()
            + save()
            + swopIndex()
        }
      }


      namespace stars.controller {
        class stars.controller.TimetableClashChecker {
            + checkClash()
            + checkClash()
        }
      }


      namespace stars.controller {
        interface stars.controller.UserControllerInterface {
            {abstract} + getCourseList()
        }
      }


      stars.controller.AdminController .up.|> stars.controller.UserControllerInterface
      stars.controller.AdminController o-- stars.controller.DatabaseManager : dbManager
      stars.controller.DatabaseManager o-- stars.entity.Database : db
      stars.controller.FlatFileAdminAuthenticator .up.|> stars.controller.Authenticator
      stars.controller.FlatFileStudentAuthenticator .up.|> stars.controller.StudentAuthenticator
      stars.controller.StudentController .up.|> stars.controller.UserControllerInterface
      stars.controller.StudentController o-- stars.controller.DatabaseManager : dbManager
      stars.controller.StudentController o-- stars.boundary.TimetableDisplayer : displayer
      stars.controller.StudentController o-- stars.entity.Student : myStudent


  namespace stars.entity {
    class stars.entity.Course {
        - au : int
        - courseID : String
        - courseName : String
        - indexList : ArrayList<Index>
        - school : String
        + Course(courseID : String, au : int, school : String, courseName : String)
        + addIndex(newIndex : Index) : boolean
        + getAu() : int
        + getCourseID() : String
        + getCourseName() : String
        + getIndexList() : ArrayList<Index>
        + getSchool() : String
        + print() : String
        + setAu(au : int)
        + setCourseID(courseID : String)
        + setCourseName(courseName : String)
        + setIndexList(indexList ArrayList<Index>) 
        + setSchool(school : String)
    }
  }


  namespace stars.entity {
    class stars.entity.Database {
        - coursesArray : ArrayList<Course>
        - studentArray : ArrayList<Student>
        + Database()
        + addCourse(course : Course) : boolean
        + addStudent(student : Student) : boolean
        + findStudent(studentID : String) : Student
        + getCoursesArray() : ArrayList<Course>
        + getStudentArray() : ArrayList<Student>
    }
  }


  namespace stars.entity {
    class stars.entity.EmailService {
        - student : Student
        - password : String
        - username : String
        + EmailService(student Student)
        + sendNotification(index : Index)
    }
  }


  namespace stars.entity {
    class stars.entity.Index {
        - confirmedList : ArrayList<Student>
        - indexNumber : int
        - timings : ArrayList<Timing>
        - vacancy : int
        - vacancyLimit : int
        - course : Course
        - waitList : ArrayList<Student>
        + Index(course : Course, vacancy : int, indexNumber : int)
        + addStudentToConfirmedList(student : Student)
        + addStudentToWaitList(student : Student)
        + addTiming(newTiming : Timing) : boolean
        + dequeueStudent() : Student
        + dropStudentFromConfirmedList(student : Student)
        + dropStudentFromWaitList(student : Student)
        + getAU() : int
        + getConfirmedList() : ArrayList<Student>
        + getCourse() : Course
        + getIndexNumber() : int
        + getTimings() ArrayList<Timing>
        + getVacancy() : int
        + getVacancyLimit() : int
        + getWaitList() : ArrayList<Student> 
        + insertStudentToWaitList(student : Student, location : int)
        + print() : String
        + setConfirmedList(confirmedList : ArrayList<Student>)
        + setCourse(course : Course)
        + setIndexNumber(indexNumber : int)
        + setTimings(timings : ArrayList<Timing>)
        + setVacancy(vacancy : UserControllerInterface)
        + setVacancyLimit(newVacancyLimit : int)
        + setWaitList(waitList : ArrayList<Student>)
    }
  }


  namespace stars.entity {
    interface stars.entity.NotificationInterface {
        {abstract} + sendNotification(index : Index)
    }
  }


  namespace stars.entity {
    interface stars.entity.Selectable {
        {abstract} + print() : String
    }
  }


  namespace stars.entity {
    class stars.entity.Student {
        - degree : String
        - email : String
        - gender : String
        - nationality : String
        - studentID : String
        - studentName : String
        - registeredCourses : StudentRegisteredCourses
        - notificationService : NotificationInterface
        + Student(studentName : String, nationality : String, gender : String, studentID : String, degree : String, email : String)
        + addIndex(index : Index) : boolean
        + changeIndex(oldIndex : Index, newIndex : Index) : boolean
        + checkChangeIndex(friendIndex : Index, myIndex : Index) : boolean
        + dropIndex(index : Index) : boolean
        + getConfirmedIndex() : ArrayList<Index>
        + getDegree() : String
        + getEmail() : String
        + getGender() : String
        + getNationality() : String
        + getRegisteredIndex() : ArrayList<Index>
        + getStudentID() : String
        + getStudentName() : String
        + getWaitlistedIndex() : ArrayList<Index>
        + getregisteredCourses() : StudentRegisteredCourses
        + moveToConfirmed(index : Index)
        + print() : String
        + sendNotification(index : Index)
        + swopPlaces(friendIndex : Index, friend : Student) : boolean
    }
  }


  namespace stars.entity {
    class stars.entity.StudentRegisteredCourses {
        - AU : int
        - confirmedIndexArray : ArrayList<Index>
        - waitlistedIndexArray : ArrayList<Index>
        - owner : Student
        + StudentRegisteredCourses(owner : Student)
        + addAU(au : int)
        + addIndex(index : Index) : boolean
        + addToConfirmedIndexArray(index : Index)
        + addToWaitlistedIndexArray(index : Index)
        + changeIndex(oldIndex : Index, newIndex : Index) : boolean
        + dropIndex(index : Index) : boolean
        + getAU() : int
        + getConfirmedIndexArray() : ArrayList<Index>
        + getIndexList() : ArrayList<Index>
        + getOwner() : Student
        + getWaitlistedIndexArray() : ArrayList<Index>
        + moveToConfirmed(index : Index)
        + removeFromConfirmedIndexArray(index : Index)
        + removeFromWaitlistedIndexArray(index : Index)
        + swopPlaces(friendIndex : Index, friend : Student) : boolean
    }
  }


  namespace stars.entity {
    class stars.entity.Timing {
        - end : LocalTime
        - start : LocalTime
        - day : Day
        - type : Type
        + Timing(day : Day, type : Type, start : LocalTime, end : LocalTime)
        + checkOverlap(otherTiming : Timing) : boolean
        + getDay() : Day
        + getEnd() : LocalTime
        + getStart() : LocalTime
        + getType() : Type
        + setEnd(end : LocalTime)
        + setStart(start : LocalTime)
    }
  }


  namespace stars.entity {
    enum Day {
      FRI
      MON
      THU
      TUE
      WED
    }
  }


  namespace stars.entity {
    enum Type {
      LAB
      LEC
      TUT
    }
  }

    namespace stars.boundary {
      namespace admin {
        class stars.boundary.admin.AddCourseUI {
            + addCourse()
        }
      }
    }


    namespace stars.boundary {
      namespace admin {
        class stars.boundary.admin.AddIndexUI {
            + addIndex()
        }
      }
    }


    namespace stars.boundary {
      namespace admin {
        class stars.boundary.admin.AddStudentUI {
            + addStudent()
        }
      }
    }


    namespace stars.boundary {
      namespace admin {
        class stars.boundary.admin.CheckVacancyUI {
            + checkVacancy()
        }
      }
    }


    namespace stars.boundary {
      namespace admin {
        class stars.boundary.admin.EditCourseInformationUI {
            + editCourseInformation()
        }
      }
    }


    namespace stars.boundary {
      namespace admin {
        class stars.boundary.admin.EditStudentAccessUI {
            + editStudentAccess()
        }
      }
    }


    namespace stars.boundary {
      namespace admin {
        class stars.boundary.admin.PrintStudentListByCourseUI {
            + printStudentListByCourse()
        }
      }
    }


    namespace stars.boundary {
      namespace admin {
        class stars.boundary.admin.PrintStudentListByIndexUI {
            + printStudentListByIndex()
        }
      }
    }


      namespace stars.boundary {
        namespace student {
          class stars.boundary.student.AddIndexUI {
              + addIndex()
          }
        }
      }


      namespace stars.boundary {
        namespace student {
          class stars.boundary.student.ChangeIndexUI {
              + changeIndex()
          }
        }
      }


      namespace stars.boundary {
        namespace student {
          class stars.boundary.student.CheckVacanciesAvailableUI {
              + checkVacanciesAvailable()
          }
        }
      }


      namespace stars.boundary {
        namespace student {
          class stars.boundary.student.DropIndexUI {
              + dropIndex()
          }
        }
      }


      namespace stars.boundary {
        namespace student {
          class stars.boundary.student.PrintRegisteredCoursesUI {
              + printRegisteredCourses()
          }
        }
      }


      namespace stars.boundary {
        namespace student {
          class stars.boundary.student.SwopIndexUI {
              + swopIndex()
          }
        }
      }


      stars.boundary.student.AddIndexUI -up-|> stars.boundary.SelectUI
      stars.boundary.student.ChangeIndexUI -up-|> stars.boundary.SelectUI
      stars.boundary.student.CheckVacanciesAvailableUI -up-|> stars.boundary.SelectUI
      stars.boundary.student.DropIndexUI -up-|> stars.boundary.SelectUI
      stars.boundary.student.SwopIndexUI -up-|> stars.boundary.SelectUI





    stars.boundary.admin.AddCourseUI -up-|> stars.boundary.SelectUI
    stars.boundary.admin.CheckVacancyUI -up-|> stars.boundary.SelectUI
    stars.boundary.admin.EditCourseInformationUI -up-|> stars.boundary.SelectUI
    stars.boundary.admin.EditStudentAccessUI -up-|> stars.boundary.SelectUI
    stars.boundary.admin.PrintStudentListByCourseUI -up-|> stars.boundary.SelectUI
    stars.boundary.admin.PrintStudentListByIndexUI -up-|> stars.boundary.SelectUI




  stars.entity.Course .up.|> java.io.Serializable
  stars.entity.Course .up.|> stars.entity.Selectable
  stars.entity.Database .up.|> java.io.Serializable
  stars.entity.EmailService .up.|> stars.entity.NotificationInterface
  stars.entity.EmailService o-- stars.entity.Student : student
  stars.entity.Index .up.|> java.io.Serializable
  stars.entity.Index .up.|> stars.entity.Selectable
  stars.entity.Index o-- stars.entity.Course : course
  stars.entity.Student .up.|> java.io.Serializable
  stars.entity.Student .up.|> stars.entity.Selectable
  stars.entity.Student o-- stars.entity.NotificationInterface : notificationService
  stars.entity.Student o-- stars.entity.StudentRegisteredCourses : registeredCourses
  stars.entity.StudentRegisteredCourses .up.|> java.io.Serializable
  stars.entity.StudentRegisteredCourses o-- stars.entity.Student : owner
  stars.entity.Timing .up.|> java.io.Serializable
  stars.entity.Timing o-- stars.entity.Timing.Day : day
  stars.entity.Timing o-- stars.entity.Timing.Type : type
  stars.entity.Timing +-down- stars.entity.Timing.Day
  stars.entity.Timing +-down- stars.entity.Timing.Type

  stars.boundary.AdminUI -up-|> stars.boundary.SelectUI
  stars.boundary.AdminUI o-- stars.controller.AdminController : adminController
  stars.boundary.IndexTimingDisplayer o-- stars.entity.Index : index
  stars.boundary.PrintIndexTimetableUI -up-|> stars.boundary.SelectUI
  stars.boundary.StudentUI -up-|> stars.boundary.SelectUI
  stars.boundary.StudentUI o-- stars.controller.StudentController : studentController
  stars.boundary.TimetableDisplayer o-- stars.entity.Student : student
  stars.boundary.admin.AddCourseUI -up-|> stars.boundary.SelectUI
  stars.boundary.admin.CheckVacancyUI -up-|> stars.boundary.SelectUI
  stars.boundary.admin.EditCourseInformationUI -up-|> stars.boundary.SelectUI
  stars.boundary.admin.EditStudentAccessUI -up-|> stars.boundary.SelectUI
  stars.boundary.admin.PrintStudentListByCourseUI -up-|> stars.boundary.SelectUI
  stars.boundary.admin.PrintStudentListByIndexUI -up-|> stars.boundary.SelectUI
  stars.boundary.student.AddIndexUI -up-|> stars.boundary.SelectUI
  stars.boundary.student.ChangeIndexUI -up-|> stars.boundary.SelectUI
  stars.boundary.student.CheckVacanciesAvailableUI -up-|> stars.boundary.SelectUI
  stars.boundary.student.DropIndexUI -up-|> stars.boundary.SelectUI
  stars.boundary.student.SwopIndexUI -up-|> stars.boundary.SelectUI
  stars.controller.AdminController .up.|> stars.controller.UserControllerInterface
  stars.controller.AdminController o-- stars.controller.DatabaseManager : dbManager
  stars.controller.DatabaseManager o-- stars.entity.Database : db
  stars.controller.FlatFileAdminAuthenticator .up.|> stars.controller.Authenticator
  stars.controller.FlatFileStudentAuthenticator .up.|> stars.controller.StudentAuthenticator
  stars.controller.StudentController .up.|> stars.controller.UserControllerInterface
  stars.controller.StudentController o-- stars.controller.DatabaseManager : dbManager
  stars.controller.StudentController o-- stars.boundary.TimetableDisplayer : displayer
  stars.controller.StudentController o-- stars.entity.Student : myStudent
  stars.entity.Course .up.|> java.io.Serializable
  stars.entity.Course .up.|> stars.entity.Selectable
  stars.entity.Database .up.|> java.io.Serializable
  stars.entity.EmailService .up.|> stars.entity.NotificationInterface
  stars.entity.EmailService o-- stars.entity.Student : student
  stars.entity.Index .up.|> java.io.Serializable
  stars.entity.Index .up.|> stars.entity.Selectable
  stars.entity.Index o-- stars.entity.Course : course
  stars.entity.Student .up.|> java.io.Serializable
  stars.entity.Student .up.|> stars.entity.Selectable
  stars.entity.Student o-- stars.entity.NotificationInterface : notificationService
  stars.entity.Student o-- stars.entity.StudentRegisteredCourses : registeredCourses
  stars.entity.StudentRegisteredCourses .up.|> java.io.Serializable
  stars.entity.StudentRegisteredCourses o-- stars.entity.Student : owner
  stars.entity.Timing .up.|> java.io.Serializable
  stars.entity.Timing o-- stars.entity.Timing.Day : day
  stars.entity.Timing o-- stars.entity.Timing.Type : type

  stars.boundary.AdminUI -up-|> stars.boundary.SelectUI
    stars.boundary.AdminUI o-- stars.controller.AdminController : adminController
    stars.boundary.IndexTimingDisplayer o-- stars.entity.Index : index
    stars.boundary.PrintIndexTimetableUI -up-|> stars.boundary.SelectUI
    stars.boundary.StudentUI -up-|> stars.boundary.SelectUI
    stars.boundary.StudentUI o-- stars.controller.StudentController : studentController
    stars.boundary.TimetableDisplayer o-- stars.entity.Student : student


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
