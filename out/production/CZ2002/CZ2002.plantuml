@startuml

title __CZ2002's Class Diagram__\n

  namespace stars.boundary {
    class stars.boundary.AdminUI {
        - adminController: AdminController
        - FORMATTER : DateTimeFormatter
        + AdminUI()
        + displayMenu()
        - addCourse()
        - addStudent()
        - checkVacancy()
        - editCourseInformation()
        - editStudentAccess()
        - printStudentListByCourse()
        - printStudentListByIndex()
    }
  }


  namespace stars.boundary {
    class stars.boundary.LoginUI {
        {static} + main(args: String[])
    }
  }


  namespace stars.boundary {
    abstract class stars.boundary.SelectUI {
        {abstract} + displayMenu()
        + select(ls: ArrayList<? extends Selectable>): Selectable
    }
  }


  namespace stars.boundary {
    class stars.boundary.StudentUI {
        + StudentUI(studentID: String)
        + displayMenu()
        - addIndex()
        - changeIndex()
        - checkVacanciesAvailable()
        - dropIndex()
        - printRegisteredCourses()
        - swopIndex()
    }
  }

  namespace stars.controller {
      class stars.controller.AdminController {
          + AdminController()
          + addCourse(courseID: String, au: int, school: String, courseName: String)
          + addIndex(selectedCourse: Course, newIndex: Index)
          + addStudent(studentName: String, nationality: String, gender: String, studentID: String, degree: String, email: String, password: String, start: LocalDateTime, end: LocalDateTime)
          + dropIndex(selectedCourse: Course , selectedIndex: Index )
          + editAccess(studentID: String, start: LocalDateTime, end: LocalDateTime)
          + getCourseList(): ArrayList<Course>
          + getStudentList(): ArrayList<Student>
          + save()
      }
    }


    namespace stars.controller {
      interface stars.controller.Authenticator {
          {abstract} + authenticate(username: String, password: String): Boolean
      }
    }


    namespace stars.controller {
      class stars.controller.FlatFileAdminAuthenticator {
          - ADMIN_ACCOUNT_FILE : String
          + authenticate(username: String, password: String): Boolean
      }
    }


    namespace stars.controller {
      class stars.controller.FlatFileStudentAuthenticator {
          - STUDENT_ACCOUNTS_FILE : String
          + addStudent(username: String, password: String, accessStart: LocalDateTime, accessEnd: LocalDateTime)
          + authenticate(username: String, password: String): Boolean
          + editAccess(username: String, accessStart: LocalDateTime, accessEnd: LocalDateTime)
      }
    }


    namespace stars.controller {
      class stars.controller.IndexStudentAdder {
          + addStudent(index: Index, studentRegisteredCourses: StudentRegisteredCourses): Boolean
      }
    }


    namespace stars.controller {
      class stars.controller.IndexStudentDropper {
          + dropStudent(index: Index, studentRegisteredCourses: StudentRegisteredCourses): Boolean
      }
    }


    namespace stars.controller {
      class stars.controller.IndexStudentSwopper {
          + swopStudent(index: Index, curStudent: Student, newStudent: Student)
      }
    }


    namespace stars.controller {
      class stars.controller.LoginController {
          + verifyLogin(username: String, password: String)
      }
    }


    namespace stars.controller {
      interface stars.controller.StudentAuthenticator {
          {abstract} + addStudent(username: String, accessStart: LocalDateTime, accessEnd: LocalDateTime)
          {abstract} + editAccess(username: String, password: String, accessStart: LocalDateTime, accessEnd: LocalDateTime)
      }
    }


    namespace stars.controller {
      class stars.controller.StudentController {
          + StudentController(studentID: String)
          + addIndex(myIndex Index): addIndex
          + changeIndex(oldIndex: Index, newIndex: Index): Boolean
          + dropIndex(index Index): Boolean
          + getCourseList(): ArrayList<Course>
          + getRegisteredIndex(): ArrayList<Index>
          + save()
          + swopIndex(): Boolean
      }
    }


    namespace stars.controller {
      class stars.controller.TimetableClashChecker {
          + checkClash(studentRegisteredCourses: StudentRegisteredCourses, newIndex: Index): Boolean
          + checkClash(studentRegisteredCourses: StudentRegisteredCourses, newIndex: Index, oldIndex: Index)
      }
    }
  

  namespace stars.entity {
      class stars.entity.Course {
          - au : int
          - courseID : String
          - courseName : String
          - indexList : ArrayList<Index>
          - school : String
          + Course(courseID: String, au: int, school: String, courseName: String)
          + addIndex(newIndex: Index)
          + getAu(): int
          + getCourseID(): String
          + getCourseName(): String
          + getIndexList(): ArrayList<Index>
          + getSchool(): String
          + print()
          + setAu(au: int)
          + setCourseID(courseID: String)
          + setCourseName(courseName: String)
          + setIndexList(indexList: ArrayList<Index>)
          + setSchool(school: String)
      }
    }


    namespace stars.entity {
      class stars.entity.CourseDB {
          - COURSE_DATABASE_FILE : String
          - courseList : ArrayList<Course>
          + CourseDB()
          + addItem(newCourse: Object)
          + getList(): ArrayList
          + loadInformation()
          + saveInformation()
      }
    }


    namespace stars.entity {
      interface stars.entity.Database {
          {abstract} + addItem()
          {abstract} + getList(): ArrayList
          {abstract} + loadInformation()
          {abstract} + saveInformation()
      }
    }

    namespace stars.entity {
      interface stars.entity.EmailService {
          - student: Student
          - username: String
          - password: String
          + emailService(student: Student)
          + sendNotification(index: Index)
      }
    }

    namespace stars.entity {
      class stars.entity.Index {
          - course: Course
          - confirmedList : ArrayList<Student>
          - indexNumber : int
          - timings : ArrayList<Timing>
          - vacancy : int
          - vacancyLimit : int
          - waitList : ArrayList<Student>
          + Index(course: Course, vacancy: int, indexNumber: int)
          + addStudentToConfirmedList()
          + addStudentToWaitList()
          + addTiming(newTiming: Timing): Boolean
          + dequeueStudent(): Student
          + dropStudentFromConfirmedList()
          + dropStudentFromWaitList()
          + getAU(): int
          + getConfirmedList(): ArrayList<Student>
          + getCourse(): Course
          + getIndexNumber(): int
          + getTimings(): ArrayList<Timing>
          + getVacancy(): int
          + getWaitList(): ArrayList<Student>
          + insertStudentToWaitList(student: Student, location: int)
          + print(): String
          + setConfirmedList(confirmedList: ArrayList<Student>)
          + setCourse(course Course)
          + setIndexNumber(indexNumber: int)
          + setTimings(timings: ArrayList<Timing>)
          + setVacancy(vacancy: int)
          + setWaitList(waitList: ArrayList<Student>)
      }
    }


    namespace stars.entity {
      interface stars.entity.NotificationInterface {
          {abstract} + sendNotification(index: Index)
      }
    }


    namespace stars.entity {
      interface stars.entity.Selectable {
          {abstract} + print(): String
      }
    }


    namespace stars.entity {
      class stars.entity.Student {
          - degree : String
          - email : String
          - gender : String
          - studentID : String
          - studentName : String
          - nationality: String
          - registeredCourses: StudentRegisteredCourses
          - notificationService: NotificationInterface
          + Student(studentName: String, nationality: String, gender: String, studentID: String, degree: String, email: String)
          + addIndex(index Index): Boolean
          + changeIndex(oldIndex: Index, newIndex: Index): Boolean
          + checkChangeIndex(myIndex: Index, friendIndex: Index): Boolean
          + dropIndex(index Index): Boolean
          + getDegree(): String
          + getEmail(): String
          + getGender(): String
          + getNationality(): String
          + getRegisteredIndex(): ArrayList<Index>
          + getStudentID(): String
          + getStudentName(): String
          + moveToConfirmed(index Index)
          + notify(index: Index)
          + print(): String
          + swopPlaces(friendIndex: Index, friend: Student)
      }
    }


    namespace stars.entity {
      class stars.entity.StudentDB {
          ~ file : File
          - studentList : ArrayList<Student>
          + StudentDB()
          + addItem(student: Object)
          + findStudent()
          + getList(): ArrayList
          + loadInformation()
          + saveInformation()
      }
    }


    namespace stars.entity {
      class stars.entity.StudentRegisteredCourses {
          - AU : int
          - confirmedIndexArray : ArrayList<Index>
          - waitlistedIndexArray : ArrayList<Index>
          - owner : Student
          + StudentRegisteredCourses(owner: Student)
          + addAU(au: int)
          + addIndex(index: Index): Boolean
          + addToConfirmedIndexArray(index: Index)
          + addToWaitlistedIndexArray(index: Index)
          + changeIndex(oldIndex: Index, newIndex: Index): Boolean
          + dropIndex(index: Index): Boolean
          + getAU(): int
          + getConfirmedIndexArray(): ArrayList<Index>
          + getIndexList(): ArrayList<Index>
          + getOwner(): Student
          + getWaitlistedIndexArray(): ArrayList<Index>
          + moveToConfirmed(index: Index)
          + removeFromConfirmedIndexArray(index: Index)
          + removeFromWaitlistedIndexArray(index: Index)
          + swopPlaces(friendIndex: Index, friend: Student)
      }
    }


    namespace stars.entity {
      class stars.entity.Timing {
          - end : LocalTime
          - start : LocalTime
          - type: Type
          - day: Day
          + Timing(day: Day, type: Type, start: LocalTime, end: LocalTime)
          + checkOverlap(otherTiming: Timing): Boolean
          + getEnd(): LocalTime
          + getStart(): LocalTime
          + setEnd(end: LocalTime)
          + setStart(start: LocalTime)
      }
    }


    namespace stars.entity {
      enum Day {
        FRI
        MON
        THU
        TUE
        WED
      }
    }


    namespace stars.entity {
      enum Type {
        LAB
        LEC
        TUT
      }
    }


  stars.boundary.AdminUI -up-|> stars.boundary.SelectUI
  stars.boundary.AdminUI o-- stars.controller.AdminController : adminController
  stars.boundary.StudentUI -up-|> stars.boundary.SelectUI
  stars.boundary.StudentUI o-- stars.controller.StudentController : studentController
  stars.controller.AdminController o-- stars.entity.CourseDB : courseInfo
  stars.controller.AdminController o-- stars.entity.StudentDB : studentInfo
  stars.controller.FlatFileAdminAuthenticator .up.|> stars.controller.Authenticator
  stars.controller.FlatFileStudentAuthenticator .up.|> stars.controller.StudentAuthenticator
  stars.controller.LoginController o-- stars.boundary.SelectUI : ui
  stars.controller.StudentController o-- stars.entity.CourseDB : courseInfo
  stars.controller.StudentController o-- stars.entity.Student : myStudent
  stars.controller.StudentController o-- stars.entity.StudentDB : studentInfo
  stars.entity.Course .up.|> java.io.Serializable
  stars.entity.Course .up.|> stars.entity.Selectable
  stars.entity.CourseDB .up.|> stars.entity.Database
  stars.entity.Index .up.|> java.io.Serializable
  stars.entity.Index .up.|> stars.entity.Selectable
  stars.entity.Index o-- stars.entity.Course : course
  stars.entity.Student .up.|> java.io.Serializable
  stars.entity.Student .up.|> stars.entity.Selectable
  stars.entity.Student o-- stars.entity.NotificationInterface : notificationService
  stars.entity.Student o-- stars.entity.StudentRegisteredCourses : registeredCourses
  stars.entity.StudentDB .up.|> stars.entity.Database
  stars.entity.StudentRegisteredCourses .up.|> java.io.Serializable
  stars.entity.StudentRegisteredCourses o-- stars.entity.Student : owner
  stars.entity.Timing .up.|> java.io.Serializable
  stars.entity.Timing o-- stars.entity.Timing.Day : day
  stars.entity.Timing o-- stars.entity.Timing.Type : type
  stars.entity.emailService .up.|> stars.entity.NotificationInterface
  stars.entity.emailService o-- stars.entity.Student : student


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
